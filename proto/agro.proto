
syntax = "proto2";

package agro_pb;

/**
 * The Task Record
 * A task is a request for work to be done, it does not represent a specific 
 * invocation of that work. It is abstract, and describes the request and its 
 * dependencies. A Job represents a real instance of a Task, and there may be 
 * multiple jobs for associated with a single task.
 */ 
message Task {
  required string id = 1;          /// ID of the task (UUID)
  repeated string task_depends = 2; /// Array of task IDs that must be State==OK before this Task can be invoked
  required string command = 3;     /// The path of the executable to be run
  repeated CmdArgument args = 4;   /// The array of command line arguments
  optional string container = 5;   /// Container ID to run the code in
  repeated string tags = 6;        /// An array of customizable tags to enable task queries
  repeated TaskRequirement requirements = 7; /// An array of system/authorization requirements needed to deploy the task
  optional State state = 8;        /// The State of the Task
  optional int32 max_retry = 9 ;  /// Number of times to retry before failure 
}

/**
 * The Job Record
 * A job is a specific instance of a Task, representing a real invocation the will
 * be or has been run on the system. 
 */
message Job {
  required string id = 1;          /// ID of the job (UUID)
  required string task_id = 2;      /// ID of the task this job is associated with
  required string command = 3;     /// The path of the executable to be run
  repeated CmdArgument args = 4;   /// The array of command line arguments
  optional string container = 5;   /// Container ID to run the code in
  required State state = 6;        /// The State of the Job
  optional string stdout = 7;      /// Captured Stdout
  optional string stderr = 8;      /// Captured Stderr
  optional string worker = 9;      /// Where the work was assigned
}


/**
 * The different states a job or a task can be in
 */
enum State {
  ERROR = 0;    /// Error state
  WAITING = 1;  /// Cannot yet be run, dependencies are not yet ready
  READY = 2;    /// Dependencies have been satisfied, but not yet assigned to worker
  PAUSED = 3;   /// Cannot yet be run, and will not become available without intervention, dependencies may be in error state
  QUEUED = 4;   /// Ready to run, assigned to worker, but not yet running
  RUNNING = 5;  /// Current running
  OK = 6;       /// Completed with no errors
}

/**
 * Job Status information
 */
message JobStatus {
  required string id = 1;    /// ID of the Job
  required State state = 2;  /// The state of the job
}

/**
 * Task status
*/
message TaskStatus {
  required string id = 1;            /// ID of the Task
  required State state = 2;          /// The State of the Task
  optional string completed_job = 3;  /// If in State=OK, which Job ID represents the successful run
  repeated string runs = 4;          /// An array of all State != OK jobs that have been attempted
}

/**
 * Task requirements
 * describes the requirements (mem, cpu count, diskspace) required for the task to be run
 */
message TaskRequirement {
  /// Right now requirement is done as a string, to allow for customization
  required string name = 1;  /// name of requirement type: includes "ram", "cpus", "disk"
  required string value = 2; /// value of requirement in string form
}

/**
 * CmdArgument
 * The arguments to be passed into the running program are passed in as an array of 
 * strings or file arguments
 */
message CmdArgument {
  oneof Value {                 /// The command line will be 'oneof': a String or a FileArgument
    string arg = 1;             /// A string argument to be copied into the command argument array
    FileArgument file_arg = 2;   /// A file that will be mapped into a command line argument
  }
}

/**
 * FileArgument
 * Represents a file that is part of the command line execution. The location of the file may be embedded 
 * into the command line, or be treated as a fixed or silent argument.
 */
message FileArgument {
  enum FileArgType {  /// The type of file argument
    PATH   = 1;       /// Pass the full path of the file into the command line
    NAMED  = 2;       /// Create a fixed name symlink in the current working directory to the input file
    REGEX  = 3;       /// Create the command line argument by applying a regular expression to the users string and replacing their variable with the file path
    STDOUT = 4;       /// The output file represents the captured STDOUT, typically associated with a 'silent output' argument
    STDERR = 5;       /// The output file represents the captured STDERR, typically associated with a 'silent output' argument
    STDIN  = 6;       /// The input file represents a pipe of the input file, typically associated with a 'silent input' argument
  }
  required string id = 1;         /// ID of the file
  required bool input = 2;        /// If True, the file is used for input, otherwise it is an output file
  required FileArgType type = 3;  /// The type of argument this file represents
  optional string name = 4;       /// if fileargtype=PATH replace 'NameKey' with path of file. if fileargtype=NAMED, "input.txt" will create a symlink 'input.txt' in the working directory
  optional string name_key = 5;    /// The regex search pattern to use on Name to place file location into argument
  optional bool silent = 6;       /// This argument is not copied into the command line
}


/**
 * Structures used for Queries
 *
 */ 

/**
 * An array of tags to search for tasks
 */
message TagArray {
  repeated string tags = 1;
}

/**
 * An array of ids to retrieve information about
 */
message IDQuery {
    repeated string ids = 1;
}

message UpdateStateRequest {
    required string id = 1;
    required State state = 2;
    optional string worker_id = 3;
}

message JobLog {
    required string id = 1;
    required bytes stdout = 2;
    required bytes stderr = 3;
}

message JobRequest {
  required string worker_id = 1;
  required int32 max = 2;
  repeated string tags = 3;
}

/**
 * Scheduler Service
 */
service Scheduler {
  rpc GetJobToRun(JobRequest) returns (stream Job) {}
  rpc SetJobLogs(JobLog) returns (JobStatus) {}
  rpc SearchTasks(TagArray) returns (stream Task) {} /// Search for tasks that match a set of tags
  rpc AddTask(Task) returns (TaskStatus) {}          /// Add a new task request
  rpc GetTaskStatus(IDQuery) returns (stream TaskStatus) {}  /// Get the status if a Task
  rpc GetJobStatus(IDQuery) returns (stream JobStatus) {}    /// Get information about a specific job
  rpc UpdateJobState(UpdateStateRequest) returns (JobStatus) {};

}

/**
 * File Access Structures and Methods
 */
 
/**
 * A block of data from a file
 */
message DataBlock {
  required string id   = 1;  /// ID of the file (UUID)
  required int64 start = 2;  /// Start position of the data block
  required int64 len   = 3;  /// Length of data block
  required bytes data  = 4;  /// The bytes of data
}

/**
 * Basic meta-data about a file
 */
message FileInfo {
  required string name = 1; /// Name of file, not unique
  required string id = 2;   /// Unique ID of file, UUID
  optional int64  size = 3; /// Size of file
  repeated string urls = 4; /// Alternate locations where the file can be downloaded
  optional State state = 5; /// State of the file
}

/**
 * MetaData API
 */

message Field {
  repeated string path = 1;
  oneof Value {
    string str_value = 2;
    int64  int_value = 3;
    double float_value = 4;
    bool   bool_value = 5;
    int64  list_declare = 6;
    int64  map_declare = 7;
  }
} 

message Document {
  required string id = 1;
  repeated Field  fields = 2;
}


/**
 * Request structures for the API
 */

/**
 * Identify a file for operations
 */
message FileID {
  required string id = 1; // ID of file
}

/**
 * The State of a file.
 * Possible states:
 *  - RUNNING : The file has been created, but is not ready to be read (still uploading)
 *  - OK : The file is ready for use 
 *  - ERROR :  File data is damaged
 */
message FileState {
  required State state = 1; /// State of the file
}

/**
 * Request to get part of a file to read
 */
message ReadRequest {
  required string id    = 1; /// ID of the file to read
  required int64  start = 2; /// Start position of the read block
  required int64  size  = 3; /// Size of the requested read
}

/**
 * API to work with files
 */
service FileStore {
  rpc CreateDoc(Document) returns (FileState) {}
  rpc GetDoc(FileID) returns (Document) {}
  rpc UpdateDoc(Document) returns (FileState) {}
  rpc DeleteDoc(FileID) returns (FileState) {}

  rpc CreateFile(FileInfo) returns (FileState) {}  /// Request the creation of a file, the file does not need to be made available until CommitFile is called
  rpc WriteFile(DataBlock) returns (FileState) {}  /// Append a datablock to the end of a file
  rpc CommitFile(FileID) returns (FileState) {}    /// Mark the end of the data upload, now the file should be available for reading
  rpc GetFileInfo(FileID) returns (FileInfo) {}    /// Get information about the file
  rpc ReadFile(ReadRequest) returns (DataBlock) {} /// Read a block of data from a file
}
