// Code generated by protoc-gen-go.
// source: proto/agro.proto
// DO NOT EDIT!

/*
Package agro_pb is a generated protocol buffer package.

It is generated from these files:
	proto/agro.proto

It has these top-level messages:
	IDQuery
	JobStatus
	TaskStatus
	Task
	Job
	Workflow
	WorkflowStatus
*/
package agro_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type State int32

const (
	State_ERROR   State = 0
	State_WAITING State = 1
	State_QUEUED  State = 2
	State_PAUSED  State = 3
	State_RUNNING State = 4
	State_OK      State = 5
)

var State_name = map[int32]string{
	0: "ERROR",
	1: "WAITING",
	2: "QUEUED",
	3: "PAUSED",
	4: "RUNNING",
	5: "OK",
}
var State_value = map[string]int32{
	"ERROR":   0,
	"WAITING": 1,
	"QUEUED":  2,
	"PAUSED":  3,
	"RUNNING": 4,
	"OK":      5,
}

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}
func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (x *State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(State_value, data, "State")
	if err != nil {
		return err
	}
	*x = State(value)
	return nil
}

type IDQuery struct {
	ID               *string `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IDQuery) Reset()         { *m = IDQuery{} }
func (m *IDQuery) String() string { return proto.CompactTextString(m) }
func (*IDQuery) ProtoMessage()    {}

func (m *IDQuery) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

type JobStatus struct {
	ID               *string `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	State            *State  `protobuf:"varint,2,req,name=State,enum=agro_pb.State" json:"State,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}

func (m *JobStatus) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *JobStatus) GetState() State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return State_ERROR
}

type TaskStatus struct {
	ID               *string      `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	State            *State       `protobuf:"varint,2,req,name=State,enum=agro_pb.State" json:"State,omitempty"`
	CompletedJob     *string      `protobuf:"bytes,6,opt,name=CompletedJob" json:"CompletedJob,omitempty"`
	Runs             []*JobStatus `protobuf:"bytes,7,rep,name=Runs" json:"Runs,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TaskStatus) Reset()         { *m = TaskStatus{} }
func (m *TaskStatus) String() string { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()    {}

func (m *TaskStatus) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *TaskStatus) GetState() State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return State_ERROR
}

func (m *TaskStatus) GetCompletedJob() string {
	if m != nil && m.CompletedJob != nil {
		return *m.CompletedJob
	}
	return ""
}

func (m *TaskStatus) GetRuns() []*JobStatus {
	if m != nil {
		return m.Runs
	}
	return nil
}

type Task struct {
	ID               *string     `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	TaskDepends      []string    `protobuf:"bytes,2,rep,name=TaskDepends" json:"TaskDepends,omitempty"`
	DataDepends      []string    `protobuf:"bytes,3,rep,name=DataDepends" json:"DataDepends,omitempty"`
	CommandLine      *string     `protobuf:"bytes,4,opt,name=CommandLine" json:"CommandLine,omitempty"`
	Container        *string     `protobuf:"bytes,5,opt,name=Container" json:"Container,omitempty"`
	Status           *TaskStatus `protobuf:"bytes,6,opt,name=Status" json:"Status,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}

func (m *Task) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *Task) GetTaskDepends() []string {
	if m != nil {
		return m.TaskDepends
	}
	return nil
}

func (m *Task) GetDataDepends() []string {
	if m != nil {
		return m.DataDepends
	}
	return nil
}

func (m *Task) GetCommandLine() string {
	if m != nil && m.CommandLine != nil {
		return *m.CommandLine
	}
	return ""
}

func (m *Task) GetContainer() string {
	if m != nil && m.Container != nil {
		return *m.Container
	}
	return ""
}

func (m *Task) GetStatus() *TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Job struct {
	ID               *string `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	Info             *Task   `protobuf:"bytes,2,req,name=Info" json:"Info,omitempty"`
	State            *State  `protobuf:"varint,3,req,name=State,enum=agro_pb.State" json:"State,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}

func (m *Job) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *Job) GetInfo() *Task {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Job) GetState() State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return State_ERROR
}

type Workflow struct {
	ID               *string `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	Tasks            []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Workflow) Reset()         { *m = Workflow{} }
func (m *Workflow) String() string { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()    {}

func (m *Workflow) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *Workflow) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type WorkflowStatus struct {
	ID               *string `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	Tasks            []*Task `protobuf:"bytes,2,rep,name=Tasks" json:"Tasks,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WorkflowStatus) Reset()         { *m = WorkflowStatus{} }
func (m *WorkflowStatus) String() string { return proto.CompactTextString(m) }
func (*WorkflowStatus) ProtoMessage()    {}

func (m *WorkflowStatus) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *WorkflowStatus) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterEnum("agro_pb.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Tasks service

type TasksClient interface {
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskStatus, error)
	AddWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*WorkflowStatus, error)
	GetTaskStatus(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*TaskStatus, error)
	GetJobStatus(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*JobStatus, error)
}

type tasksClient struct {
	cc *grpc.ClientConn
}

func NewTasksClient(cc *grpc.ClientConn) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskStatus, error) {
	out := new(TaskStatus)
	err := grpc.Invoke(ctx, "/agro_pb.Tasks/AddTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) AddWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*WorkflowStatus, error) {
	out := new(WorkflowStatus)
	err := grpc.Invoke(ctx, "/agro_pb.Tasks/AddWorkflow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTaskStatus(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*TaskStatus, error) {
	out := new(TaskStatus)
	err := grpc.Invoke(ctx, "/agro_pb.Tasks/GetTaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetJobStatus(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := grpc.Invoke(ctx, "/agro_pb.Tasks/GetJobStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tasks service

type TasksServer interface {
	AddTask(context.Context, *Task) (*TaskStatus, error)
	AddWorkflow(context.Context, *Workflow) (*WorkflowStatus, error)
	GetTaskStatus(context.Context, *IDQuery) (*TaskStatus, error)
	GetJobStatus(context.Context, *IDQuery) (*JobStatus, error)
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TasksServer).AddTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Tasks_AddWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TasksServer).AddWorkflow(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Tasks_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TasksServer).GetTaskStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Tasks_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TasksServer).GetJobStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agro_pb.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _Tasks_AddTask_Handler,
		},
		{
			MethodName: "AddWorkflow",
			Handler:    _Tasks_AddWorkflow_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _Tasks_GetTaskStatus_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _Tasks_GetJobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
